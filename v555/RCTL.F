C-------------------------------------------------------------------
C      READ CONTROL FILE SUBROUTINE
C-------------------------------------------------------------------
      SUBROUTINE RCTL(PWALK,HOV2P,HOV3P,HOV4P,ZHHD,EQUIV,HHFACT,
     *                KKUR,EBUSCR,DNAME)
      INCLUDE 'stadat.com'
      INCLUDE 'param.com'
      INCLUDE 'mtamcpar.inc'
C
C DECLARATIONS REQUIRED FOR SUBROUTINE
C
      
      INTEGER*2     IMON,IDAY,IYR,IHR,IMIN,ISEC,I100
C     INTEGER*4     IARRAY(3),IARRAY2(3),NCBDZ
      integer*2     szone,sc,sc2,equv1,equv2,equv3,ERRN,K2,K1
      INTEGER*2     EQUV4,EQUV5,STAT1
      integer*2     minsta,nmnsta,STAZONE,EQUIV(MAX_STATIONS)
      INTEGER*4     SNODE1,SNODE2,PCOSTZ(10)
      INTEGER*4     ZONE,STACOD,ZERROR(MAX_IZONES),DIST(6)
      INTEGER*4     K,KK,NCATS,NZONES,DIZ
      REAL*4        SPRICE,wlkb14,wlkb12,wlkr14,wlkr12,pcpi
      REAL*4        INCOME,INC1,INC2,INC3,TTIME,ccode,ZPCOST
      REAL*4        PCOST,PKUSED,active,pcapc
      REAL*4        MCOEF(10),VCOEF(25),KKUR(3)
      REAL*4        PERINC1,PERINC2,PERINC3,TOTHH
      REAL*4        PWALK(MAX_ZONES,2),ZHHD(18,MAX_IZONES)
      REAL*4        HHFACT(3),PKCOST(10),PDEN,ADEN
      REAL*4        AWALK,BWALK,PRWALK,PIVT,KWALK,KIVT
      REAL*4        POP,TOTEMP,AREA,DENSITY
      REAL*4        ADENP,BDENP,CEMPDEN,CDENP,DDENP,EDENP
      REAL*4        ADENA,BDENA,CDENA,DDENA,EDENA
      character*1   mode,FF,PTYPE,PNR,KNR,ULINE,RED,BLUE,COMMA
      CHARACTER*1   GREEN,GOLD
      CHARACTER*6   TPURP,TDAY
      CHARACTER*7   NAMERR(5)
      CHARACTER*20  DISTNAME,DNAME(21)
      CHARACTER*60  ALTNAME,CONTROL
      CHARACTER*37  SNAME
      CHARACTER*200 SRECORD
      CHARACTER*300 NRECORD
      LOGICAL       EXISTS,CTLERR(5),EBUSCR,BPWALK
      DATA          NAMERR/'FILES  ','PARAMS ','COEFFS ',
     *                     'OPTIONS','CONSTS '/
      DATA          PNR/'P'/,KNR/'K'/,RED/'R'/,BLUE/'B'/
     *              GREEN/'G'/,GOLD/'L'/,COMMA/','/
C
C     NAMELIST DEFINITION..........
C
      NAMELIST  /PARAMS/ TPURP,TDAY,ALTNAME,CLOSURE,MAXCALIT,NITER,I,
     *                   J,SELSTA,OPCOST,HOV3P,HOVDIST,
     *                   TOLDIST,TOLCST,WAITLT,
     *                   PCPI,BPFACE,BPFACT,AUTOCC,HHFACT,ADJFCT,
     *                   CBDZ,PERFACT,EGRDIST,EXPACCD,TWYACCD,LAXZ,
     *                   BRTACCD,SCOORD,SWALK,LWALK,FCPI,BPFACR,
     *                   UNIONSTA,OBCBDTR,HOV4P,HOV2P,
     *                   PNMOT,PNWALK,PDRV0,PDRV2,PDRV4,
     *                   FIXIJTRIPS,SWALKUR,LWALKUR,SWALKCR,LWALKCR
      NAMELIST /OPTIONS/ DEBUG,CALIB,LOGSUM,USERBEN,USERASC,
     *                   INCLEV,BESTPATH,LRTIND,TRIPSOUT,EXPCAP,
     *                   HBW,NHB,HBNW,CAPRES,NMOT,STACAR,CRPRB,
     *                   NEGSHP,CRTIND,NOTXFR,EBUSCR,BUSTEXP,HFACT,
     *                   BPWALK,STAXY,OUTPER,OSTAFMT,SDETAIL,
     *                   AIRPASS,NEWSED,TXFSUM,WLKSTA,SPEVENT,TDEBUG
      NAMELIST  /COEFFS/ MCOEF,MWALK1,MWALK2,MBIKE1,MBIKE2,MWALKT,
     *                   LSUMSW,LSUMSB,LSUMSP,LSUMSK,VCOEF,LSUMA,
     *                   LSUMS,LSUMT,CCRPNR,CCBD,CRDIST,DISTEXP,
     *                   CCRPNR2,LSUMSUW,LSUMSUB,LSUMSUP,LSUMSUK,
     *                   CDAR,URBDIST,URGDIST,COEFF,YINTER,YSLOPE,
     *                   LSUMTW,LSUMRB,ADENP,BDENP,CEMPDEN,CDENP,DDENP,
     *                   EDENP,DSCT2P,DSCT3P,DSCT4P,ADENA,BDENA,CDENA,
     *                   DDENA,EDENA,LSUMBR,MINDEN
      NAMELIST  /CONSTS/ KKCR,KPCR,KBCR,KWCR,KKUR,KPUR,KBUR,KWUR,
     *                   KWWAY,KDWAY,KWEXP,KDEXP,KWBUS,KDBUS,KDTRN,
     *                   KPNR,KDA,K2P,K3P,K4P,KCR,KUR,KEBUS,KWAY,KLBUS,
     *                   KRBUS,KSR,KAUT,KTRN,KNMOT,KBIKE,KBRPDW,KBTWYW,
     *                   KBEXPW,KINFL,KINFR,KRED,KBLUE,KBEXPD,KBTWYD,
     *                   KGREEN,KGOLD,KTRNT,KURLAX,KBRT,KBRPDD,KDBRT,
     *                   KBBRTW,KBBRTD,CCBD,FACTPER,TRNPROD,KTOLL,
     *                   KTOLL2,KTOLL3,KTOLL4,KHOV2,KHOV3,KHOV4
C--------------------------------------------------------------------
      FF=CHAR(12)
      NCATS=3   
      PERFACT=1.0
      SCOORD=0.01
      HOV2P=2.0
      HOV4P=4.0
      PNMOT=0.19
      PNWALK=0.80
      PDRV0=0.70
      PDRV2=0.80
      PDRV4=0.38
      DSCT2P=1.0
      DSCT3P=1.0
      DSCT4P=1.0
      WAITLT=5.0
      SWALKUR=5.0
      LWALKUR=10.0
      SWALKCR=5.0
      LWALKCR=10.0
      DO 11 K=1,20
      DO 11 K1=1,20
      DO 11 K2=1,3
      TRNPROD(K1,K2)=0.0
      FACTPER(K,K1,K2)=1.0
   11 CONTINUE
      TDEBUG=.FALSE.
      MAXDIST=0
C
C     OPEN AND READ THE CONTROL FILE
C
      CALL GETARG(1,CONTROL,STAT1)
      IF(STAT1.LE.0) THEN
        WRITE(*,'('' RCTL (F) : CONTROL FILE NOT SPECIFIED'')')
        STOP " ENTER THE CONTROL FILE NAME ON THE COMMAND LINE."
      END IF
      OPEN(10,FILE=CONTROL,STATUS='OLD',FORM='FORMATTED',
     *     ERR=90)
      REWIND 10
      GO TO 91
   90 WRITE(*,9510)
 9510 FORMAT(/,1X,'RCTL 9510 (F) ERROR OPENING CONTROL CARD INPUT ',
     *       'FILE')
      STOP 8
   91 CALL RDFILES(CTLERR(1))
      REWIND 10
      READ(10,PARAMS,ERR=5)
      REWIND 10
      GO TO 10
    5 CTLERR(2)=.TRUE.
   10 READ(10,COEFFS,ERR=15)
      REWIND 10
      GO TO 20
   15 CTLERR(3)=.TRUE.
   20 READ(10,OPTIONS,ERR=25)
      REWIND 10
      GO TO 30
   25 CTLERR(4)=.TRUE.
   30 READ(10,CONSTS,ERR=35)
      REWIND 10
      GO TO 50
   35 CTLERR(5)=.TRUE.
C
C     CLOSE THE CONTROL FILE AND OPEN THE STATION ERROR FILE;
C
   50 CLOSE(10,STATUS='KEEP')
      OPEN(42,FILE='MTAMC.UR.STACCC.RPT',STATUS='UNKNOWN',
     *        FORM='FORMATTED')
      OPEN(41,FILE='MTAMC.CR.STACCC.RPT',STATUS='UNKNOWN',
     *        FORM='FORMATTED')
      OPEN(43,FILE='MTAMC.BRT',STATUS='UNKNOWN',FORM='FORMATTED')
      OPEN(10,FILE='STATION.ERR',STATUS='UNKNOWN',
     *        FORM='FORMATTED')
      IF(OUTDEN) THEN
      OPEN(47,FILE=DENOUT,STATUS='UNKNOWN',FORM='FORMATTED')
      WRITE(47,8804)
 8804 FORMAT('ZONE,DENSITY,PRODDEN,PRODVAL,ATTRDEN,ATTRVAL')
      END IF
C
C     CHECK FOR ERRORS IN THE READS; WRITE ANY MESSAGES TO REPORT FILE
C
      DO 75 E=1,5
        IF(CTLERR(E)) THEN
          WRITE(*,9002) NAMERR(E)
 9002     FORMAT(/' RCTL 9002 (F) ERROR(S) READING &',A7)
          ERRN=ERRN+1
        ENDIF
   75 CONTINUE
      IF(ERRN.GT.0) STOP 16
C 
C DETERMINE THE NUMBER OF CBD ZONES PROVIDED
C
      DO 76 E=1,50
      IF(CBDZ(E).GT.0) NCBDZ=E
   76 CONTINUE
C
C OPEN STATION-BASED BINARY FILES
C
      IF(DEBUG) THEN
      OPEN(31,FILE='CRUR.STA',STATUS='UNKNOWN',
     *          FORM='BINARY')
      OPEN(27,FILE='EPTW.STA',STATUS='UNKNOWN',
     *          FORM='BINARY')
      OPEN(33,FILE='CRUR.EGR',STATUS='UNKNOWN',
     *          FORM='BINARY')
      OPEN(34,FILE='EPTW.EGR',STATUS='UNKNOWN',
     *          FORM='BINARY')
      OPEN(32,FILE='BRTUR.STA',STATUS='UNKNOWN',
     *          FORM='BINARY')
      END IF
      IF(.NOT.CAPRES) THEN
      CAPRES=.TRUE.
      NITER=0
      WRITE(*,8099)
 8099 FORMAT(//,' RCTL 8099 (F) CAPRES CAN NOT BE = F --',
     *          ' RESET TO =T, NITER SET =0'//)
      END IF
      IF(BESTPATH.AND.NITER.GT.0) THEN
      NITER=0
      WRITE(26,8098)
 8098 FORMAT(//,' RCTL 8098 (W) BESTPATH=T, NITER SET EQUAL TO 0')
      END IF
      IF(EBUSCR) THEN
      WRITE(26,8097) 
 8097 FORMAT(//,' RCTL 8097 (I) EBUSCR NOT CURRENTLY AVAILABLE ',
     *          ' SET TO F')
      EBUSCR=.FALSE.
      END IF
      IF(LSUMTW.EQ.0.0) LSUMTW=LSUMS
      IF(LSUMRB.EQ.0.0) LSUMRB=LSUMS
      IF(LSUMBR.EQ.0.0) LSUMBR=LSUMS
C
C SUMMARIZE INPUT CONTROL FILE INFORMATION
C
      WRITE(26,7003) I,J,SELSTA
 7003 FORMAT(1X,'GLOBAL MODEL PARAMETERS'/
     *       1X,'-----------------------'//
     *       1X,'SELECTED ORIGIN ZONES (I)          =',10I5/
     *       1X,'SELECTED DESTINATION ZONES (J)     =',10I5/
     *       1X,'SELECTED STATIONS (SELSTA)         =',10I5/
     *       1X,'                                   =',10I5/)
      IF(NCBDZ.GT.0) THEN
      WRITE(26,8024) (CBDZ(E),E=1,NCBDZ)
 8024 FORMAT(1X,'CBD ZONES (CBDZ)                   =',10I5/
     *       1X,'                                   =',10I5/
     *       1X,'                                   =',10I5/
     *       1X,'                                   =',10I5/
     *       1X,'                                   =',10I5/)
      END IF
      WRITE(26,8023) NITER,PCPI,FCPI,BPFACE,BPFACT,BPFACR,
     * AUTOCC,HHFACT,      
     * OPCOST,HOV2P,HOV3P,HOV4P,HOVDIST,
     * TOLDIST,TOLCST,YINTER,YSLOPE,
     * CCRPNR,CCRPNR2,
     * CRDIST,DISTEXP,EGRDIST,TWYACCD,EXPACCD,BRTACCD,
     * CDAR,CCBD,PERFACT,SCOORD,SWALK,LWALK,
     * SWALKUR,LWALKUR,SWALKCR,LWALKCR,WAITLT,
     * MINDEN,ADENP,BDENP,
     * CDENP,DDENP,EDENP,ADENA,BDENA,CDENA,DDENA,EDENA,
     * CEMPDEN,DSCT2P,DSCT3P,DSCT4P,UNIONSTA
 8023 FORMAT(/1X,'PARKING CAP RESTRAINT ITERATIONS   =',I8,' (NITER)'/
     *  1X,'PARKING COST CPI FACTOR            =',F8.3,' (PCPI)'/
     *  1X,'TRANSIT FARE CPI FACTOR            =',F8.3,' (FCPI)'/
     *  1X,'PNR PROPORTION FOR EXPRESS BUS     =',F8.3,' (BPFACE)'/
     *  1X,'PNR PROPORTION FOR TRANSITWAY      =',F8.3,' (BPFACT)'/
     *  1X,'PNR PROPORTION FOR BRT             =',F8.3,' (BPFACR)'/
     *  1X,'PARK-N-RIDE AUTO OCCUPANCY         =',F8.3,' (AUTOCC)'/
     *  1X,'HOUSEHOLD TRIP FACTORS (INCOME)    =',3F8.3,' (HHFACT)'/    
     *  1X,'OPERATING COST PER MILE            =',F8.3,' (OPCOST)'/
     *  1X,'2  PERSON AVERAGE OCCUPANCY        =',F8.3,' (HOV2P)'/
     *  1X,'3+ PERSON AVERAGE OCCUPANCY        =',F8.3,' (HOV3P)'/
     *  1X,'4+ PERSON AVERAGE OCCUPANCY        =',F8.3,' (HOV4P)'/
     *  1X,'HOV MINIUMU DISTANCE THRESHOLD     =',F8.3,' (HOVDIST)'/
     *  1X,'TOLL MINIMUM DISTANCE THRESHOLD    =',F8.3,' (TOLDIST)'/
     *  1X,'TOLL COST PER MILE                 =',4F8.3,' (TOLCST)'/
     *  1X,'TOLL CHOICE Y-INTERCEPT VALUE      =',F8.3,' (YINTER)'/
     *  1X,'TOLL CHOICE DISTANCE SLOPE         =',F8.3,' (YSLOPE)'/
     *  1X,'COEFFICIENT ON CR DRIVE IVT/CR IVT =',F8.3,' (CCRPNR)'/
     *  1X,'COEFFICIENT OF CR DRIVE DST/TOT DST=',F8.3,' (CCRPNR2)'/
     *  1X,'COEFFICIENT ON CR DISTANCE         =',F8.3,' (CRDIST)'/
     *  1X,'EXPONENT ON CR DISTANCE FUNCTION   =',F8.3,' (DISTEXP)'/
     *  1X,'MAXIMUM STATION EGRESS AUTO DIST   =',F8.3,' (EGRDIST)'/
     *  1X,'MAXIMUM TRANSITWAY ACCESS AUTO DIST=',F8.3,' (TWYACCD)'/
     *  1X,'MAXIMUM EXPRESSBUS ACCESS AUTO DIST=',F8.3,' (EXPACCD)'/
     *  1X,'MAXIMUM BRT        ACCESS AUTO DIST=',F8.3,' (BRTACCD)'/
     *  1X,'COEFFICIENT ON DRIVE ACCESS RATIO  =',F8.3,' (CDAR)'/
     *  1X,'COEEFICIENT ON CBD DESTINATION     =',7F8.3,' (CCBD)'/
     *  1X,'SCALE ON INPUT PERSON TRIPS        =',F8.3,' (PERFACT)'/
     *  1X,'SCALE ON INPUT COORDINATES         =',F8.3,' (SCORRD)'/
     *  1X,'MAXIMUM WALK TIME - SHORT WALK     =',F8.3,' (SWALK)'/
     *  1X,'MAXIMUM WALK TIME -  LONG WALK     =',F8.3,' (LWALK)'/
     *  1X,'MAXIMUM WALK TIME - SHORT WALK(UR) =',F8.3,' (SWALKUR)'/
     *  1X,'MAXIMUM WALK TIME -  LONG WALK(UR) =',F8.3,' (LWALKUR)'/
     *  1X,'MAXIMUM WALK TIME - SHORT WALK(CR) =',F8.3,' (SWALKCR)'/
     *  1X,'MAXIMUM WALK TIME -  LONG WALK(CR) =',F8.3,' (LWALKCR)'/
     *  1X,'1ST WAIT TIME THRESHOLD VALUE      =',F8.3,' (WAITLT)'//
     *  1X,'MINIMUM DENSITY VALUE FOR FUNCTION =',F8.3,' (MINDEN)'/
     *  1X,'A     COEFFICIENT - DENSITY(PROD)  =',F8.5,' (ADEN)'/
     *  1X,'B     COEFFICIENT - DENSITY(PROD)  =',F8.5,' (BDEN)'/
     *  1X,'C     COEFFICIENT - DENSITY(PROD)  =',F8.5,' (CDEN)'/
     *  1X,'D     COEFFICIENT - DENSITY(PROD)  =',F8.5,' (DDEN)'/
     *  1X,'E     COEFFICIENT - DENSITY(PROD)  =',F8.5,' (EDEN)'/
     *  1X,'A     COEFFICIENT - DENSITY(ATTR)  =',F8.5,' (ADEN)'/
     *  1X,'B     COEFFICIENT - DENSITY(ATTR)  =',F8.5,' (BDEN)'/
     *  1X,'C     COEFFICIENT - DENSITY(ATTR)  =',F8.5,' (CDEN)'/
     *  1X,'D     COEFFICIENT - DENSITY(ATTR)  =',F8.5,' (DDEN)'/
     *  1X,'E     COEFFICIENT - DENSITY(ATTR)  =',F8.5,' (EDEN)'/
     *  1X,'EMPLOYMENT COEFFICIENT - DENSITY   =',F8.3,' (CEMPDEN)'//
     *  1X,'TOLL COST DISCOUNT FACTOR  - 2 PER =',F8.3,' (DSCT2P)'/
     *  1X,'TOLL COST DISCOUNT FACTOR  - 3 PER =',F8.3,' (DSCT3P)'/
     *  1X,'TOLL COST DISCOUNT FACTOR  - 4+PER =',F8.3,' (DSCT4P)'/
     *  1X,'UNION STATION NUMBER (METROLINK)   =',I8,' (UNIONSTA)'///)
      WRITE(26,8022) DEBUG,CALIB,HBW,HBNW,NHB,CAPRES,EXPCAP,
     *               NEGSHP,NOTXFR,EBUSCR,BUSTEXP,
     *               LOGSUM,USERBEN,USERASC,INCLEV,TRIPSOUT,
     *               BESTPATH,LRTIND,CRTIND,NMOT,STACAR,CRPRB,
     *               BPWALK,STAXY,OUTPER,OSTAFMT,NEWSED,AIRPASS
 8022 FORMAT(1X,'BASIC PROGRAM OPTIONS'/
     *       1X,'------------------------'//
     *       1X,'DEBUG SWITCH                 =',7X,L1,' (DEBUG)'/
     *       1X,'CALIBRATION MODE             =',7X,L1,' (CALIB)'/
     *       1X,'HOME-BASED WORK PURPOSE      =',7X,L1,' (HBW)'/
     *       1X,'HOME-BASED NON-WORK PURPOSE  =',7X,L1,' (HBNW)'/
     *       1X,'NON-HOME BASED PURPOSE       =',7X,L1,' (NHB)'/
     *       1X,'CAPACITY RESTRAINT           =',7X,L1,' (CAPRES)'/
     *       1X,'CAPACITY RESTRAINT - EXP BUS =',7X,L1,' (EXPCAP)'/
     *       1X,'ALLOW NEGATIVE SHADOW PRICES =',7X,L1,' (NEGSHP)'/
     *       1X,'NO BUS TRANSFERS ALLOWED     =',7X,L1,' (NOTXFR)'/
     *       1X,'ALLOW EXPRESS BUS -=> CR     =',7X,L1,' (EBUSCR)'/
     *       1X,'EXAMINE TRANSFER TO EXP BUS  =',7X,L1,' (BUSTEXP)'/
     *       1X,'OUTPUT LOGSUM VALUES         =',7X,L1,' (LOGSUM)'/
     *       1X,'OUTPUT FTA USER BENEFIT FILE =',7X,L1,' (USERBEN)'/
     *       1X,'USER BENEFIT-ASCII FORMAT    =',7X,L1,' (USERASC)'/
     *       1X,'INCOME SPECIFIC OUTPUT TABLES=',7X,I1,' (INCLEV)'/
     *       1X,'OUTPUT TRIP TABLES           =',7X,L1,' (TRIPSOUT)'/
     *       1X,'OUTPUT BEST PATH MATRICES    =',7X,L1,' (BESTPATH)'/
     *       1X,'OUTPUT URBAN RAIL INDICATOR  =',7X,L1,' (LRTIND)'/
     *       1X,'OUTPUT COMMUTR RAIL INDICATOR=',7X,L1,' (CRTIND)'/
     *       1X,'ALLOW NON-MOTORIZED TRAVEL   =',7X,L1,' (NMOT)'/
     *       1X,'CONSIDER CR AUTO EGRESS      =',7X,L1,' (STACAR)'/
     *       1X,'OUTPUT CR PROBABILITY MATRIX =',7X,L1,' (CRPRB)'/
     *       1X,'USE BUS ONLY WALK PERCENTS   =',7X,L1,' (BPWALK)'/
     *       1X,'USE X-Y FOR STATION WALK     =',7X,L1,' ( STAXY)'/
     *       1X,'OUTPUT FACTORED PERSON TRIPS =',7X,L1,' (OUTPER)'/
     *       1X,'USE OLD STATION FORMAT       =',7X,L1,' (OSTAFMT)'/
     *       1X,'USE NEW SED FILE FORMAT      =',7X,L1,' (NEWSED)'/
     *       1X,'APPLY AIR PASSENGER MODEL    =',7X,L1,' (AIRPASS)'//)
      WRITE(26,8055) PNMOT,PNWALK,PDRV0,PDRV2,PDRV4
 8055 FORMAT(1X,'INTRAZONAL PROPORTIONS'/
     *       1X,'----------------------'/
     *       1X,'NON-MOTORIZED PROPORTION ( PNMOT)=',F6.3,
     *             ' OF TOTAL PERSON TRIPS'/
     *       1X,'WALK          PROPORTION (PNWALK)=',F6.3,
     *             ' OF WALK/BIKE TRIPS'/
     *       1X,'DRIVE ALONE   PROPORTION ( PDRV0)=',F6.3,
     *             ' OF AUTO PERSON TRIPS'/
     *       1X,'2 PERSON AUTO PROPORTION ( PDRV2)=',F6.3,
     *             ' OF SHARED RIDE TRIPS'/
     *       1X,'4 PERSON AUTO PROPORTION ( PDRV4)=',F6.3,
     *             ' OF 3/4 PERSON AUTO TRIPS'//)
      IF (CALIB) THEN
         WRITE(26,8032) MAXCALIT,CLOSURE
 8032    FORMAT(1X,'CALIBRATION PARAMETERS'/
     *          1X,'----------------------'//
     *          1X,'MAXIMUM NUMBER OF ITERATIONS =',I8,' (MAXCALIT)'/
     *          1X,'CLOSURE CRITERIA             =',F8.5,' (CLOSURE)'/)
      END IF 
C
C CHECK FOR INCLEV VALUE
C
      IF(INCLEV.LT.0.OR.INCLEV.GT.3) THEN
      WRITE(26,8088) INCLEV
 8088 FORMAT(1X,'RCTL 8088 (F) INCLEV SPECIFICATION MUST RANGE',
     *          ' BETWEEN 0 AND 3, INPUT VALUE=',I2)
      STOP 16
      END IF
C
C CHECK TRIP PURPOSE LOGIC
C
      IF(HBNW.AND.NHB) THEN
	WRITE(26,8037)
 8037 FORMAT(1X,'RCTL 8037 (F) HBNW AND NHB ARE MUTALLY EXCLUSIVE',
     *          ' CHOICES')
      STOP 16
      END IF
C
C CHECK CAPACITY RESTRAINT ITERATION LOGIC
C
      IF((.NOT.CAPRES).AND.NITER.GT.0) NITER=0
C
C CHECK SHORT WALK/LONG WALK VALUE SETTINGS
C
      IF(SWALK.LE.0.OR.LWALK.LE.0) THEN
      WRITE(26,8039) SWALK,LWALK
 8039 FORMAT(1X,'RCTL 8039 (F) EITHER THE SHORT (',F6.2,
     * ') OR LONG (',F6.2,') WALK',
     * ' MAXIMUM TIME VALUES ARE ZERO')
      STOP 16
      END IF
C
C CHECK CPI FACTOR INPUTS
C
      IF(PCPI.LE.0) THEN
      WRITE(26,8040)
 8040 FORMAT(/1X,'RCTL 8040 (W) PARKING COST CPI FACTOR EQUAL TO 0,'
     *          ' RESET TO 1.0'/)
      PCPI=1.0
      END IF
      IF(FCPI.LE.0) THEN
      WRITE(26,8041)
 8041 FORMAT(/1X,'RCTL 8041 (W) TRANSIT FARE CPI FACTOR EQUAL TO 0,'
     *          ' RESET TO 1.0'/)
      FCPI=1.0
      END IF
C
C CHECK INDICATOR MATRIX OUTPUT LOGIC
C
      IF(LRTIND.AND.CRTIND) THEN
      WRITE(26,8042)
 8042 FORMAT(/1X,'RCTL 8042(F) LRTIND AND CRTIND ARE BOTH TRUE')
      STOP 8042
      END IF
C
C CHECK LOGIC FOR AIRPASS OPTION
C
      IF(AIRPASS.AND.(.NOT.BESTPATH)) BESTPATH=.TRUE.
C
C STORE COEFFICIENT VALUES
C
       DO 115,II=1,10
       COEFF(II)=MCOEF(II)
  115  CONTINUE
      DO 18 K=1,10
         KK=K+10
	   KL=K+20
         COEFF(KK)=VCOEF(K)
	   COEFF(KL)=VCOEF(K)
   18 CONTINUE
C
C SCALE COEFFICIENT VALUES BY LOGSUM VALUES
C
      DO 19 K=11,20
      COEFF(K)=COEFF(K)/(LSUMS*LSUMA)
   19 CONTINUE
      CCRPNR=CCRPNR/(LSUMS*LSUMA*LSUMT)
      CCRPNR2=CCRPNR2/(LSUMS*LSUMA*LSUMT)
      CRDIST=CRDIST/LSUMA
      DO 29 K=21,30
      COEFF(K)=COEFF(K)/(LSUMS*LSUMA*LSUMT)
   29 CONTINUE
      IF(COEFF(99).EQ.0.0) COEFF(99)=1.0
      COEFF(100)=VCOEF(1)
C
C SCALE INCOME SPECIFIC COST COEFFICIENTS
C
      COEFF(61)=COEFF(61)/(LSUMS*LSUMA)
      COEFF(62)=COEFF(62)/(LSUMS*LSUMA)
      COEFF(63)=COEFF(63)/(LSUMS*LSUMA)
      COEFF(81)=COEFF(61)
      COEFF(82)=COEFF(62)
      COEFF(83)=COEFF(63)
      IF(COEFF(71).NE.0.0) THEN
      COEFF(71)=COEFF(71)/(LSUMT*LSUMS*LSUMA)
      ELSE
      COEFF(71)=COEFF(61)/LSUMT
      END IF
      IF(COEFF(72).NE.0.0) THEN
      COEFF(72)=COEFF(72)/(LSUMT*LSUMS*LSUMA)
      ELSE
      COEFF(72)=COEFF(62)/LSUMT
      END IF
      IF(COEFF(73).NE.0.0) THEN
      COEFF(73)=COEFF(73)/(LSUMT*LSUMS*LSUMA)
      ELSE
      COEFF(73)=COEFF(63)/LSUMT
      END IF
C
C BACKWARDS COMPATIBLE TO THE RIVERSIDE VERSION
C
      IF(OSTAFMT) THEN
      COEFF(81)=COEFF(16)
      COEFF(82)=COEFF(16)
      COEFF(83)=COEFF(16)
      COEFF(71)=COEFF(26)
      COEFF(72)=COEFF(26)
      COEFF(73)=COEFF(26)
      END IF
C....................................................................
      IF(DEBUG) THEN
      WRITE(26,8026)
 8026 FORMAT(/' COMPUTED COEFFICIENT VALUES'/
     *       ' ---------------------------'/)
      DO 21 K=1,100
      IF(COEFF(K).NE.0.0) WRITE(26,8027) K,COEFF(K)
 8027 FORMAT(1X,'COEFF(',I3,')=',E12.5E2)
   21 CONTINUE
      END IF
C.....................................................................
C
C OPEN CONTROL FILE, AND REPORT OUTPUT FILE
C
C
C OPEN STATION FILE
C
      INQUIRE (FILE=STATDATA,EXIST=EXISTS)
      IF(.NOT.EXISTS) THEN
      WRITE(26,9315) STATDATA
 9315 FORMAT(1X,'RCTL 9315 (F) STATION INPUT FILE STATDATA=',A40,
     *       ' DOES NOT EXIST')
      WRITE(*,9315) STATDATA
      STOP 8
      ELSE
      OPEN(13,FILE=STATDATA,
     *        STATUS='OLD',FORM='FORMATTED')
      END IF
C
C OPEN ZONAL SE STANDARD DATA FILE
C
      INQUIRE (FILE=ZFSTD,EXIST=EXISTS)
      IF(.NOT.EXISTS) THEN
      WRITE(26,9015) ZFSUP
 9015 FORMAT(1X,'RCTL 9015 (F) HOUSEHOLD INPUT FILE ZFSTD=',A40,
     *       ' DOES NOT EXIST')
      WRITE(*,9015) ZFSTD
      STOP 8
      ELSE
      OPEN(9,FILE=ZFSTD,STATUS='OLD',FORM='FORMATTED')
      END IF
C
C  OPEN AND STORE DISTRICT-EQUIVALENCE DATA IF PROVIDED
C
      INQUIRE(FILE=FDISTEQ,EXIST=EXISTS)
      IF(EXISTS) THEN
      OPEN(3,FILE=FDISTEQ,STATUS='OLD',FORM='FORMATTED')
 9616 READ(3,*,END=9618) ZONE,DIST
      IF(ZONE.GT.20) THEN
      WRITE(26,9621)
      WRITE(*,9621)
 9621 FORMAT(//' MAXIMUM ALLOWABLE DISTRICT NUMBER IS 20')
      STOP
      END IF
      IF(ZONE.GT.MAXDIST) MAXDIST=ZONE
      IF(ZONE.LE.0) GO TO 9618
      DISTEQ(DIST(1))=ZONE
      DO 9619 K=2,6
      IF(DIST(K).EQ.0) GO TO 9616
      IF(DIST(K).LT.0) THEN
      K1=DIST(K-1)
      K2=IABS(DIST(K))
      DO 9620 K3=K1,K2
      DISTEQ(K3)=ZONE
 9620 CONTINUE
      ELSE
      DISTEQ(DIST(K))=ZONE
      END IF
 9619 CONTINUE
      GO TO 9616
 9618 CONTINUE
      ELSE
      WRITE(26,9622) FDISTEQ
      WRITE(*,9622) FDISTEQ
 9622 FORMAT(//1X,'RCTL 9622 (F) ZONE-DISTRICT EQUIVALENCE FILE',
     *          ' FDISTEQ=',A40,' DOES NOT EXIST')
      STOP 16
      END IF
C
C CHECK FOR DISTRICT NAMES
C
      INQUIRE(FILE=FDISTNAME,EXIST=EXISTS)
      IF(EXISTS) THEN
      OPEN(125,FILE=FDISTNAME,STATUS='OLD',FORM='FORMATTED')
 9625 READ(125,*,END=9623,ERR=9624) ZONE,DISTNAME
      DNAME(ZONE)=DISTNAME
      GO TO 9625
 9624 WRITE(26,9626) ZONE
 9626 FORMAT(' RCTL 9626 (F) ERROR READING DISTRICT NAME FILE',
     *       ' NEAR DISTRICT=',I2)
      STOP 9626
 9623 CONTINUE
      END IF
C
C OPEN ZONAL SE SUPPLEMENTAL DATA FILE
C
      INQUIRE (FILE=ZFSUP,EXIST=EXISTS)
      IF(.NOT.EXISTS) THEN
      WRITE(26,9416) ZFSUP
 9416 FORMAT(1X,'RCTL 9015 (F) HOUSEHOLD INPUT FILE ZFSUP=',A40,
     *       ' DOES NOT EXIST')
      WRITE(*,9016) ZFSUP
      STOP 8
      ELSE
      OPEN(3,FILE=ZFSUP,STATUS='OLD',FORM='FORMATTED')
      END IF
C
C OPEN PERCENT WALK DATA FILE
C
      INQUIRE (FILE=WFNAME,EXIST=EXISTS)
      IF(.NOT.EXISTS) THEN
        WRITE(26,9016) WFNAME
 9016   FORMAT(1X,'RCTL 9016 (F) PERCENT WALK FILE WFNAME=',A40,
     *         ' DOES NOT EXIST')
        WRITE(*,9016) WFNAME
        STOP 8
      ELSE
        OPEN(12,FILE=WFNAME,STATUS='OLD',FORM='FORMATTED')
      END IF      
C-----------------------------------------------------------------
C  READ STATION FILE FOR CENTROID NUMBERS, EQUIVALENT STATIONS,
C  AND PARKING CAPCACITY & PARKING COST
C-----------------------------------------------------------------
      do 111,ik=1,MAX_STATIONS
        stanum(ik)=0
	do 111,il=1,14
  	stadata(ik,il)=0.0
 111  continue
C
C  READ & SKIP HEADER RECORD
C
      IF(.NOT.OSTAFMT) READ(13,9110,END=7,ERR=8) SRECORD
 9110 FORMAT(A200)
C
C READ INDIVIDUAL STATION RECORDS
C
    6 CONTINUE
      IF(OSTAFMT) THEN
      READ(13,9010,END=7,ERR=8) MODE,ULINE,SZONE,SNODE1,SNODE2,
     *                     PTYPE,PCAPC,pcost,
     *                     SNAME,EQUV1,EQUV2,EQUV3,ACTIVE
 9010 FORMAT(a1,A1,i4,t21,2(1x,i5),1x,a1,f5.0,F7.0,t48,a33,
     *       t83,3i5,T109,F1.0)
      ELSE
      READ(13,9110,END=7,ERR=8) SRECORD
      CALL REFORM(SRECORD,NRECORD)
C..PSUEDO ZONE
      K1=1
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(1:K2),9701) SZONE
 9701 FORMAT(I5)
C..STATION NAME
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9702) SNAME
 9702 FORMAT(A37)
C..STATION GROUP ID
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
C..USE FLAG
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) ACTIVE
C..STATION TYPE
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9703) MODE
 9703 FORMAT(A1)
C..URBAN RAIL INDICATOR CODE
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9703) ULINE
C..TRANSIT NODE
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9701) SNODE1
C..HIGHWAY NODE
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9701) SNODE2
C..STATION WALK ACCESS TIME
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) AWALK
 9704 FORMAT(F5.0)
C..STATION BUS ACCESS TIME
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) BWALK
C..PARKING TYPE
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9703) PTYPE
C..PARKING CAPACITY
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) PCAPC
C..PARKING COST
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) PCOST
C..STATION PNR WALK
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) PRWALK
C..STATION PNR IVT
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) PIVT
C..STATION KNR WALK
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) KWALK
C..STATION KNR IVT
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9704) KIVT
C..STATION EQUIVALENCE NUMBERS
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9701) EQUV1
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9701) EQUV2
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9701) EQUV3
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9701) EQUV4
      K1=K2+2
      CALL STAREAD(K1,K2,NRECORD)
      READ(NRECORD(K1:K2),9701) EQUV5
      END IF
C.................................................................
      IF(DEBUG) THEN
C     WRITE(26,9006) SZONE,SNAME,ACTIVE,MODE,ULINE,SNODE1,SNODE2,
C    *               AWALK,BWALK,PTYPE,PCAPC,PCOST,PRWALK,PIVT,
C    *               KWALK,KIVT,EQUV1,EQUV2,EQUV3,EQUV4,EQUV5
 9006 FORMAT(' SZONE=',I4,' SNAME=',A37,' ACTIVE=',F2.0,' MODE=',A1,
     * ' ULINE=',A1,' SNODE1=',I5,' SNODE2=',I5,' AWALK=',F5.2,
     * ' BWALK=',F5.2,' PTYPE=',A1,' PCAPC=',f5.0,' PCOST=',F5.2,
     * ' PRWALK=',F5.2,' PIVT=',F5.2,' KWALK=',F5.2,' KIVT=',F5.2,
     * ' EQUV1=',I5,' EQUV2=',I5,' EQUV3=',I5,' EQUV4=',I5,
     * ' EQUV5=',I5)   
      END IF
C.................................................................
         SC=SZONE-MAX_IZONES
         IF(SC.LE.0) THEN
         WRITE(26,9011) SZONE
 9011    FORMAT(' STATION ZONE NUMBER (',I4,') IS OUT OF RANGE',
     *          ' ERROR IN STATION PARKING FILE')
         STOP 16
         END IF
         IF(SZONE.EQ.MAX_ZONES) THEN
         WRITE(26,9012) SZONE,MAX_ZONES
 9012    FORMAT(1X,'RCTL 9012 (F)--- THE LAST STATION ZONE ',I4,
     *             ' MUST BE LESS THAN',
     *             ' THE MAXIMUM NUMBER OF ZONES ',I4)
         STOP 16
         END IF
         STANAME(SC)=SNAME
         STANODE1(SC)=SNODE1
         STANODE2(SC)=SNODE2
	   IF(EQUV1.EQ.0) EQUV1=MAX_ZONES
	   IF(EQUV2.EQ.0) EQUV2=MAX_ZONES
	   IF(EQUV3.EQ.0) EQUV3=MAX_ZONES
	   IF(EQUV4.EQ.0) EQUV4=MAX_ZONES
	   IF(EQUV5.EQ.0) EQUV5=MAX_ZONES
	   IF(EQUV1.LT.MAX_IZONES) THEN
	   WRITE(26,9013) EQUV1,SZONE,MAX_IZONES
 9013      FORMAT(/1X,'RCTL 9013 (W) EQUIVALENT STATION VALUE=',I4,
     *            ' FOR STATION=',I4,
     *            ' IS LESS THAN THE NUMBER OF INTERNAL ZONES (',
     *            I4,') VALUE RESET')
           EQUV1=MAX_ZONES
           END IF
           IF(EQUV2.LT.MAX_IZONES) THEN
	   WRITE(26,9013) EQUV2,SZONE,MAX_IZONES
           EQUV2=MAX_ZONES
           END IF
           IF(EQUV3.LT.MAX_IZONES) THEN
	   WRITE(26,9013) EQUV3,SZONE,MAX_IZONES
           EQUV3=MAX_ZONES
           END IF
           IF(EQUV4.LT.MAX_IZONES) THEN
	   WRITE(26,9013) EQUV4,SZONE,MAX_IZONES
           EQUV4=MAX_ZONES
           END IF
           IF(EQUV5.LT.MAX_IZONES) THEN
	   WRITE(26,9013) EQUV5,SZONE,MAX_IZONES
           EQUV5=MAX_ZONES
           END IF
         MINSTA=MIN(SZONE,EQUV1,EQUV2,EQUV3,EQUV4,EQUV5)
         NMNSTA=MINSTA-MAX_IZONES
         IF(MODE.EQ.'B') STADATA(SC,2)=1.0
         IF(MODE.EQ.'C') STADATA(SC,2)=2.0
         IF(MODE.EQ.'U') STADATA(SC,2)=3.0
         IF(MODE.EQ.'T') STADATA(SC,2)=4.0
         IF(MODE.EQ.'R') STADATA(SC,2)=5.0
         IF(MODE.EQ.'B'.AND.ACTIVE.EQ.1.0) STANUM(SC)=3
         IF(MODE.EQ.'C'.AND.ACTIVE.EQ.1.0) STANUM(SC)=1
         IF(MODE.EQ.'U'.AND.ACTIVE.EQ.1.0) STANUM(SC)=2
         IF(MODE.EQ.'T'.AND.ACTIVE.EQ.1.0) STANUM(SC)=4
         IF(MODE.EQ.'R'.AND.ACTIVE.EQ.1.0) STANUM(SC)=5
C        IF(MODE.EQ.'U'.AND.ULINE.EQ.'R') STADATA(SC,8)=1.0
C        IF(MODE.EQ.'U'.AND.ULINE.EQ.'B') STADATA(SC,8)=2.0
C        IF(MODE.EQ.'U'.AND.ULINE.EQ.'G') STADATA(SC,8)=3.0
C        IF(MODE.EQ.'U'.AND.ULINE.EQ.'L') STADATA(SC,8)=4.0
C        IF(EBUSCR) THEN
C        IF(MODE.EQ.'B'.AND.ULINE.EQ.'M') STADATA(SC,8)=9.0
C        END IF
         IF(MODE.EQ.'U'.AND.ULINE.EQ.'H') STADATA(SC,8)=5.0
         IF(MODE.EQ.'U'.AND.ULINE.EQ.'L') STADATA(SC,8)=6.0
         EQUIV3(SC,1)=EQUV1
         EQUIV3(SC,2)=EQUV2
         EQUIV3(SC,3)=EQUV3
         EQUIV3(SC,4)=EQUV4
         EQUIV3(SC,5)=EQUV5
         EQUIV(SC)=NMNSTA
         STADATA(SC,1)=PCOST
         STADATA(SC,4)=PCAPC
         STADATA(SC,3)=PCAPC
         STADATA(SC,6)=ACTIVE
         STADATA(SC,9)=AWALK
         STADATA(SC,10)=BWALK
         STADATA(SC,11)=PRWALK
         STADATA(SC,12)=PIVT
         STADATA(SC,13)=KWALK
         STADATA(SC,14)=KIVT
         IF(PTYPE.EQ.PNR) STADATA(SC,7)=1
         IF(PTYPE.EQ.KNR) STADATA(SC,7)=2
         IF(STADATA(SC,7).LE.0) THEN
         WRITE(10,9112) SZONE,SNAME
 9112    FORMAT(1X,'RCTL 9112 (WARNING) STATION (',I4,') ',A25,
     *          ' DOES NOT ALLOW FOR PNR OR KNR')
         END IF  
         IF(STADATA(SC,7).EQ.2.AND.PCAPC.GT.0) THEN
         WRITE(10,9212) SZONE,SNAME
 9212    FORMAT(1X,'RCTL 9112 (WARNING) STATION (',I4,') ',A25,
     *          ' IS DEFINED AS KNR, BUT CONTAINS SPACES')
         END IF  
      GO TO 6
    8 WRITE(26,9007) SZONE
 9007 FORMAT(/,1X,'RCTL 9007 (F) ENCOUNTERED ERROR READING DATA',
     *         ' RECORD FOR STATION ',I4)
      WRITE(*,9007) SZONE
      WRITE(26,9006) MODE,ULINE,SZONE,SNODE1,SNODE2,
     *                  PTYPE,PCAPC,pcost,SNAME,
     *                  EQUV1,EQUV2,EQUV3,ACTIVE
      STOP 16
    7 CONTINUE
C
C  READ ZONAL SE DATA FILES
C
  101 IF(NEWSED) THEN
      READ(9,8801,END=1001) ZONE,POP,TOTEMP,INCOME,INC1,INC2,INC3,AREA
 8801 FORMAT(I8,24X,F8.0,24X,6F8.0)
        IF(ZONE.LE.0.OR.ZONE.GT.MAX_IZONES) THEN
        WRITE(26,8702) ZONE
        GO TO 101
        END IF 
        DIZ=DISTEQ(ZONE)
      ZHHD(12,ZONE)=POP
      ZHHD(13,ZONE)=TOTEMP
      ZHHD(14,ZONE)=AREA
      DENSITY=(POP+CEMPDEN*TOTEMP)/(AREA*1000.0)
      ZHHD(15,ZONE)=DENSITY
      IF(DENSITY.GT.MINDEN) THEN
      ZHHD(16,ZONE)=ADENP+BDENP*(1-EXP(-CDENP*DENSITY))+
     *              DDENP*(1-EXP(-EDENP*DENSITY))
      END IF
      ZHHD(17,ZONE)=ADENA+BDENA*(1-EXP(-CDENA*DENSITY))+
     *              DDENA*(1-EXP(-EDENA*DENSITY))
      ZHHD(18,ZONE)=0.0
      IF(OUTDEN) THEN
      PDEN=ZHHD(16,ZONE)/(COEFF(100)*(-1.0))
      ADEN=ZHHD(17,ZONE)/(COEFF(100)*(-1.0))
      WRITE(47,8803) ZONE,DENSITY,ZHHD(16,ZONE),PDEN,ZHHD(17,ZONE),ADEN
 8803 FORMAT(I4,5(',',F12.5))
      END IF
      IF(DIZ.EQ.8.AND.(HBW)) ZHHD(16,ZONE)=0.7*ZHHD(16,ZONE)
      IF(DIZ.EQ.3)  ZHHD(17,ZONE)=ZHHD(17,ZONE)-0.10
      IF(DIZ.EQ.4)  ZHHD(17,ZONE)=ZHHD(17,ZONE)-0.25
      IF(DIZ.EQ.5)  ZHHD(17,ZONE)=ZHHD(17,ZONE)+0.2
      IF(DIZ.EQ.17) ZHHD(17,ZONE)=ZHHD(17,ZONE)+0.5
      IF(DIZ.EQ.20) ZHHD(17,ZONE)=ZHHD(17,ZONE)+0.25
      IF(DIZ.EQ.14) ZHHD(17,ZONE)=ZHHD(17,ZONE)-0.5
      IF(DIZ.EQ.15) ZHHD(17,ZONE)=ZHHD(17,ZONE)-0.15
      IF(DIZ.EQ.18) ZHHD(17,ZONE)=ZHHD(17,ZONE)-0.75
C ---------------------------------------------------------------
      IF(DEBUG) THEN
C     WRITE(26,8802) ZONE,DENSITY,ZHHD(16,ZONE),
C    *               ZHHD(17,ZONE)
 8802 FORMAT(' ZONE=',I4,' DENSITY=',E12.5,' PROD CONSTANT=',
     *       E12.5,' ATTR CONSTANT=',E12.5)
      END IF
C --------------------------------------------------------------
      ELSE
      READ(9,8701,END=1001) ZONE,INCOME,INC1,INC2,INC3
 8701 FORMAT(I4,T53,4f6.0)
      END IF
      IF(ZONE.LE.0.OR.ZONE.GT.MAX_IZONES) THEN
      WRITE(26,8702) ZONE
 8702 FORMAT(' ZONE NUMBER (',I4,') IS OUT OF RANGE',
     *          ' ERROR IN ZONAL SE DATA FILE')
      GO TO 101
      END IF 
      ZHHD(1,ZONE)=INCOME
      TOTHH=INC1+INC2+INC3
	    IF(TOTHH.GT.0.0) THEN
      PERINC1=(INC1/TOTHH)
      PERINC2=(INC2/TOTHH)
      PERINC3=(INC3/TOTHH)
	ELSEIF(TOTHH.LE.0.0) THEN
	PERINC1=0.0
	PERINC2=0.0
	PERINC3=0.0
	ENDIF
      ZHHD(2,ZONE)=PERINC1
      ZHHD(3,ZONE)=PERINC2
      ZHHD(4,ZONE)=PERINC3
      ZHHD(8,ZONE)=INC1
	ZHHD(9,ZONE)=INC2
	ZHHD(10,ZONE)=INC3
	ZHHD(11,ZONE)=TOTHH
      GOTO 101
 1001 CONTINUE
C
C  READ SUPPLEMENTAL ZONAL SE FILE (NOTE:  ZONAL PARKING COSTS IN $1999)
C
  103 READ(3,8003,END=1003) ZONE,TTIME,ZPCOST,ccode
 8003 FORMAT(I4,T9,f2.0,T11,f6.0,T28,f1.0)
      IF(ZONE.LE.0.OR.ZONE.GT.MAX_IZONES) THEN
      WRITE(26,8703) ZONE
 8703 FORMAT(' ZONE NUMBER (',I4,') IS OUT OF RANGE',
     *          ' ERROR IN SUPP ZONAL SE DATA FILE')
      GO TO 103
      END IF 
      ZHHD(5,ZONE)=ZPCOST*Pcpi
      IF(ccode.GT.5) THEN
      ZERROR(ZONE)=IFIX(ccode)
      ccode=1.0
      END IF
      IF(CCODE.LT.1.OR.CCODE.GT.5) THEN
      WRITE(26,9097) CCODE,ZONE
 9097 FORMAT(/1X,'COUNTY CODE OF ',I2,' IS OUT OF RANGE FOR ZONE ',I4/
     *        1X,' VALUE RESET TO 1')
      CCODE=1
      END IF
      ZHHD(6,ZONE)=ccode
      ZHHD(7,ZONE)=TTIME
      GOTO 103
 1003 CONTINUE
      DO 1006 ZONE=1,MAX_IZONES
      IF(ZERROR(ZONE).GT.0) THEN
      OPEN(28,FILE='MTAMC.ERR',STATUS='UNKNOWN',FORM='FORMATTED')
      GO TO 1007
      END IF
 1006 CONTINUE
      GO TO 1008
 1007 CONTINUE
      DO 1004 ZONE=1,MAX_IZONES
      IF(ZERROR(ZONE).GT.0) THEN
      WRITE(28,1005) ZONE,ZERROR(ZONE)
 1005 FORMAT(1X,'RCTL 1005 ERROR: ZONE=',I4,' HAD A COUNTY CODE OF ',
     *       I2,' RESET TO 1')
	  END IF
 1004 CONTINUE
 1008 CONTINUE
      WRITE(26,1009)
 1009 FORMAT(//,' PARKING COST SUMMARY REPORT'/
     *          ' ---------------------------'/
     *          '  ZONE (DAILY COST 1999$)')
      DO 1010 ZONE=1,MAX_IZONES
      IF(ZHHD(5,ZONE).GT.0) THEN
      INDEX=INDEX+1
      PCOSTZ(INDEX)=ZONE
      PKCOST(INDEX)=ZHHD(5,ZONE)/100.0
       IF(INDEX.EQ.10) THEN
       WRITE(26,1011) ((PCOSTZ(K),PKCOST(K)),K=1,10)
 1011  FORMAT(2X,10(I4,'($',F6.2,')',1X))
       INDEX=0
       END IF
      END IF
 1010 CONTINUE
      IF(INDEX.GT.0) WRITE(26,1011) ((PCOSTZ(K),PKCOST(K)),K=1,INDEX)
C
C
C
C  SHADOW PRICE FILE - FOR BASE YEAR THIS IS ZERO
C
      INQUIRE (FILE=SHADIN,EXIST=EXISTS)
      IF(.NOT.EXISTS) THEN
      WRITE(26,9415) SHADIN
 9415 FORMAT(1X,'RCTL 9415 (F) SHADOW PRICE INPUT FILE SHADIN=',A40,
     *       ' DOES NOT EXIST')
      WRITE(*,9415) SHADIN
      STOP 8
      ELSE
      OPEN(15,FILE=shadin,STATUS='OLD',FORM='FORMATTED')
      END IF
   40 READ(15,41,END=45) STACOD,SPRICE
   41 FORMAT(2X,I4,2x,f6.0)
      SC=STACOD-MAX_IZONES
	IF(SC.LE.0) THEN
      WRITE(10,8706) STACOD
 8706 FORMAT(' STATION CODE (',I4,') IS OUT OF RANGE',
     *          ' ERROR IN SHADOW PRICE FILE')
      GO TO 40
      END IF
      STADATA(SC,5)=SPRICE
      GO TO 40
   45 CLOSE(15,STATUS='KEEP')
C
C INPUT AND STORE PERCENT WALK FILE DATA
C
   60 READ(12,61,END=66) ZONE,wlkb14,wlkb12,wlkr14,wlkr12
   61 FORMAT(T5,i4,t11,f6.0,t19,f6.0,t27,f6.0,t35,f6.0)
      IF(ZONE.LE.0.OR.ZONE.GT.MAX_IZONES) THEN
      WRITE(26,8704) ZONE
 8704 FORMAT(' ZONE NUMBER (',I4,') IS OUT OF RANGE',
     *          ' ERROR IN PERCENT WALK DATA FILE')
      GO TO 60
      END IF
      IF(BPWALK) THEN
            PWALK(ZONE,1)=wlkb14
            PWALK(ZONE,2)=wlkb12-wlkb14
      ELSE
            IF(WLKB14.GE.WLKR14) THEN
            PWALK(ZONE,1)=wlkb14
            PWALK(ZONE,2)=wlkb12-wlkb14
            ELSEIF(WLKB14.LT.WLKR14) THEN
            PWALK(ZONE,1)=wlkr14
            PWALK(ZONE,2)=wlkr12-wlkr14
            ENDIF
      END IF
          IF(PWALK(ZONE,2).LT.0) THEN
          WRITE(26,8705) ZONE
 8705     FORMAT(' ZONE NUMBER (',I4,') CONTAINS AN',
     *          ' ERROR IN PERCENT WALK DATA FILE')
          END IF
      GO TO 60
   66 CONTINUE
C
C  SET THE I-ZONE CONTROLS
C
C
      DO 65,IN=1,10
       IF(I(IN).GT.0) THEN
          NI=NI+1
          IF(I(IN).LE.MAX_IZONES) THEN
            IOI(I(IN))=.TRUE.
          ENDIF
       ELSEIF(I(IN).LT.0) THEN
          NI=NI+1
          IEND=I(IN)*(-1)
          IBEG=I(IN-1)+1
       DO 63,INF=IBEG,IEND
          IOI(INF)=.TRUE.
  63   CONTINUE
       ENDIF
  65   CONTINUE
C
C  SET THE J-ZONE CONTROLS
C
       DO 70,JN=1,10
       IF(J(JN).GT.0) THEN
         NJ=NJ+1
         IF(J(JN).LE.MAX_IZONES) THEN
            JOI(J(JN))=.TRUE.
         ENDIF
       ELSEIF(J(JN).LT.0) THEN
        NJ=NJ+1
        JEND=J(JN)*(-1)
        JBEG=J(JN-1)+1
        DO 68, INF=JBEG,JEND
        JOI(INF)=.TRUE.
 68     CONTINUE
       ENDIF
 70    CONTINUE
C
C  READ IN FILE CONTAINING PARKING UTILIZATION FROM PREVIOUS
C  RUNS AND SUBTRACT OUT USED SPACES FROM PARKING CAPACITY
C  IF PARKING RESTRAINT IN EFFECT
C
      INQUIRE (FILE=PKUTIN,EXIST=EXISTS)
      IF(.NOT.EXISTS) THEN
      WRITE(26,9515) PKUTIN
 9515 FORMAT(1X,'RCTL 9515 (F) PARKING UTILIZATION INPUT FILE PKUTIN=',
     *        A40,' DOES NOT EXIST')
      WRITE(*,9515) PKUTIN
      STOP 8
      ELSE
      open(15,file=PKUTIN,form='formatted',status='old')
      END IF

      IF(CAPRES) THEN
   71 read(15,8141,end=83) stazone,pkused
 8141 format(2x,i4,2x,F5.0)
      sc=stazone-MAX_IZONES
      IF(SC.LE.0) THEN
      WRITE(10,8707) STAZONE
 8707 FORMAT(' STATION ZONE NUMBER (',I4,') IS OUT OF RANGE',
     *          ' ERROR IN PARKING UTILIZATION FILE')
      GO TO 60
      END IF
      stadata(sc,3)=STADATA(sc,4) - PKUSED
      if(stadata(sc,3).lt.0.0) then
      write(10,8142) stazone,pkused,stadata(sc,4)
 8142 format(1x,'Station ',i4,' has ',f5.0,' used spaces which ',
     *       'exceeds the station capacity of ',f5.0)
      stadata(sc,3)=0.0
      end if
      goto 71
   83 continue
      ENDIF
C
C     OPEN FTA USER BENEFIT FILE (IF REQUESTED)
C
      IF(USERBEN) THEN
       IF(USERASC) THEN
       OPEN(29,FILE=FUSERBN,STATUS='UNKNOWN',FORM='FORMATTED')
       NZONES=MAX_IZONES
       WRITE(29,6001) NZONES,NCATS,VCOEF(1),VCOEF(1),TPURP,TDAY,ALTNAME
 6001  FORMAT(2I4,2F10.4,2A6,A60)
       ELSE
       OPEN(29,FILE=FUSERBN,STATUS='UNKNOWN',FORM='BINARY')
	 NZONES=MAX_IZONES
       WRITE(29) NZONES,NCATS,VCOEF(1),VCOEF(1),TPURP,TDAY,ALTNAME
       END IF
      END IF
C
C      OPEN PERSON AND TRANSIT TRIP SUMMARY BY INCOME GROUP AND TRIP LENGTH
C
      IF(CALIB) OPEN(44,FILE='PERINC.DAT',STATUS='UNKNOWN',
     *          FORM='FORMATTED')
C
C     OPEN AIR PASSENGER LEVEL-OF-SERVICE DATA FILE
C
      IF(AIRPASS) THEN
      OPEN(65,FILE='AIRPASS_EST.CSV',STATUS='UNKNOWN',
     *                 FORM='FORMATTED')
      WRITE(65,8800)
 8800 FORMAT('ORG,DEST,ACCESS,MODE,WAIT1,TXWAIT,NOTXFER,WALKACC,',
     *       'DRIVACC,WALKEGR,TXFWALK,LOCAL,EXPRESS,TRANSITWAY,',
     *       'URBANRAIL,COMMRAIL,FARE,RAPIDBUS,BRT,OSTA,ASTA')
      END IF
C
C     OPEN MODEL ESTIMATED VALUE FILE
C
      IF(CALIB) THEN
      OPEN(67,FILE='MODEL_EST.CSV',STATUS='UNKNOWN',FORM='FORMATTED')
      END IF
C
C      OPEN DETAILED REPORTING FILES
C
      IF(DEBUG.AND.SDETAIL) THEN
      OPEN(61,FILE='STA_TO_STA.RPT',STATUS='UNKNOWN',FORM='FORMATTED')
      OPEN(62,FILE='DSTA_TO_ZNE.RPT',STATUS='UNKNOWN',FORM='FORMATTED')
      OPEN(63,FILE='OSTA_TO_ZNE.RPT',STATUS='UNKNOWN',FORM='FORMATTED')
      OPEN(64,FILE='BRT_TO_UR.RPT',STATUS='UNKNOWN',FORM='FORMATTED')
      END IF
C
      CLOSE(10,STATUS='KEEP')
      CLOSE(25,STATUS='KEEP')
      CLOSE(13,STATUS='KEEP')
      CLOSE(14,STATUS='KEEP')
      CLOSE(9,STATUS='KEEP')
      CLOSE(3,STATUS='KEEP')
      CLOSE(12,STATUS='KEEP')
      CLOSE(15,STATUS='KEEP')
      CLOSE(28,STATUS='KEEP')
      RETURN 
      END
C-------------------------------------------------------------------
C      READ AND RETURN VALUE FROM STATION RECORD STRING
C-------------------------------------------------------------------
      SUBROUTINE STAREAD(K1,K2,SRECORD)
      INTEGER*2     K1,K2,K3
      CHARACTER*300 SRECORD
      CHARACTER*1   COMMA
      DATA          COMMA/','/
      K2=0
      DO 9000 K=K1,300
      IF(SRECORD(K:K).EQ.COMMA) THEN
       K2=K-1
      RETURN
      END IF
 9000 CONTINUE
      K2=K1+20
      IF(K2.GT.300) K2=300
      RETURN
      END
C ----------------------------------------------------------------
C    INSERT BLANKS FOR MISSING FIELDS
C ---------------------------------------------------------------
      SUBROUTINE REFORM(SRECORD,TEMP)
      CHARACTER*200 SRECORD
      CHARACTER*300 TEMP
      CHARACTER*1   COMMA,BLANK
      INTEGER*2     K,K2
      DATA          COMMA/','/,BLANK/' '/
      K1=0
      DO K=1,200
      K1=K1+1
      IF(SRECORD(K:K).NE.COMMA) THEN
      TEMP(K1:K1)=SRECORD(K:K)
      ELSE
      TEMP(K1:K1)=SRECORD(K:K)
C     WRITE(26,9001) K,K1,SRECORD(K:K),TEMP(K1:K1)
       K2=K+1
       IF(SRECORD(K2:K2).EQ.COMMA) THEN
       K1=K1+1
       TEMP(K1:K1)=BLANK
       END IF
      END IF
C     WRITE(26,9001) K,K1,SRECORD(K:K),TEMP(K1:K1)
C9001 FORMAT(' K=',I3,' K1=',I3,' SRECORD(K)=',A1,
C    *       ' TEMP(K1)=',A1)
      END DO
C     WRITE(26,9002) TEMP
C9002 FORMAT(A300)    
      RETURN
      END 